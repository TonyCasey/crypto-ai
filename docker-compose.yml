version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: cryptobot-postgres
    environment:
      POSTGRES_DB: cryptobot_dev
      POSTGRES_USER: cryptobot
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - cryptobot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cryptobot -d cryptobot_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cryptobot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cryptobot-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: cryptobot-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://cryptobot:dev_password_123@postgres:5432/cryptobot_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev_jwt_secret_key_not_for_production
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app/backend:ro
      - ./packages:/app/packages:ro
      - node_modules:/app/node_modules
      - backend_node_modules:/app/backend/node_modules
    networks:
      - cryptobot-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: development
    container_name: cryptobot-frontend
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:5000
      VITE_WS_URL: ws://localhost:5000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app/frontend:ro
      - ./packages:/app/packages:ro
      - frontend_node_modules:/app/frontend/node_modules
    networks:
      - cryptobot-network
    depends_on:
      - backend
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0

networks:
  cryptobot-network:
    driver: bridge
    name: cryptobot-network

volumes:
  postgres_data:
    name: cryptobot-postgres-data
  redis_data:
    name: cryptobot-redis-data
  node_modules:
    name: cryptobot-node-modules
  backend_node_modules:
    name: cryptobot-backend-node-modules
  frontend_node_modules:
    name: cryptobot-frontend-node-modules