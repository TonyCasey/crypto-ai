version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: cryptobot-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cryptobot}
      POSTGRES_USER: ${POSTGRES_USER:-cryptobot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cryptobot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cryptobot} -d ${POSTGRES_DB:-cryptobot}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: cryptobot-redis-prod
    volumes:
      - redis_data:/data
    networks:
      - cryptobot-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: cryptobot-backend-prod
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      CORS_ORIGIN: ${FRONTEND_URL}
      
      # Exchange API Keys (encrypted)
      COINBASE_API_KEY: ${COINBASE_API_KEY}
      COINBASE_API_SECRET: ${COINBASE_API_SECRET}
      COINBASE_PASSPHRASE: ${COINBASE_PASSPHRASE}
      
      # Optional: Monitoring and logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SENTRY_DSN: ${SENTRY_DSN}
      
    ports:
      - "5000:5000"
    networks:
      - cryptobot-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: production
    container_name: cryptobot-frontend-prod
    environment:
      API_URL: ${API_URL}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/ssl/certs:ro  # SSL certificates if using HTTPS
    networks:
      - cryptobot-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Optional: Reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: cryptobot-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    networks:
      - cryptobot-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - with-nginx

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cryptobot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - cryptobot-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cryptobot-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - cryptobot-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  cryptobot-network:
    driver: bridge
    name: cryptobot-network-prod

volumes:
  postgres_data:
    name: cryptobot-postgres-data-prod
  redis_data:
    name: cryptobot-redis-data-prod
  prometheus_data:
    name: cryptobot-prometheus-data
  grafana_data:
    name: cryptobot-grafana-data